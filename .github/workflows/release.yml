# release.yml
name: Build & Release APK

on:
  push:
    tags:
      - 'v*'

env:
  # Using a modern JDK like 17 is recommended for running Gradle itself.
  # This is compatible with your project's target of Java 11.
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  build-and-release:
    name: Build & Release APK
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write

    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Setup Build Environment Info
        id: build-info
        run: |
          echo "::notice title=Build Info::Building version ${{ github.ref_name }} from commit ${{ github.sha }}"
          echo "build-time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: ☕ Setup Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3

      # Granting execute permission for gradlew is a good practice in CI
      - name: 🔐 Grant Gradle Execution Permissions
        run: chmod +x ./gradlew

      # Add debugging step to check splits configuration
      - name: 🔍 Debug Gradle Configuration
        run: |
          echo "::group::Checking Gradle configuration"
          ./gradlew help --task :app:assembleRelease
          echo "::endgroup::"
          
          echo "::group::Checking splits configuration"
          ./gradlew :app:tasks --all | grep -i split || echo "No split tasks found"
          echo "::endgroup::"

      - name: 🔨 Build Release & Debug APKs
        run: |
          echo "::group::Building APK files with verbose output"
          ./gradlew assembleRelease assembleDebug --info --stacktrace
          echo "::endgroup::"

      - name: 🔎 Verify APK Generation (Enhanced)
        id: verify-apks
        run: |
          RELEASE_APKS_PATH="app/build/outputs/apk/release"
          DEBUG_APKS_PATH="app/build/outputs/apk/debug"
          
          echo "::group::Complete APK directory structure"
          find app/build/outputs -type f -name "*.apk" -exec ls -la {} \; || echo "No APKs found"
          echo "::endgroup::"
          
          echo "::group::Verifying Generated APK files"
          if [ -d "$RELEASE_APKS_PATH" ]; then
            echo "Release APKs found:"
            ls -lR "$RELEASE_APKS_PATH"
            echo "release_path=$RELEASE_APKS_PATH" >> $GITHUB_OUTPUT
          else
            echo "::warning::Release APK directory not found."
            echo "release_path=" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "$DEBUG_APKS_PATH" ]; then
            echo "Debug APKs found:"
            ls -lR "$DEBUG_APKS_PATH"
            echo "debug_path=$DEBUG_APKS_PATH" >> $GITHUB_OUTPUT
          else
            echo "::warning::Debug APK directory not found."
            echo "debug_path=" >> $GITHUB_OUTPUT
          fi

          APK_COUNT=$(find app/build/outputs/apk -name "*.apk" 2>/dev/null | wc -l)
          if [ "$APK_COUNT" -eq 0 ]; then
            echo "::error title=Build Failed::No APK files were generated."
            exit 1
          fi
          
          echo "::notice title=Build Success::$APK_COUNT APK files generated successfully."
          
          # Check if splits were actually generated
          SPLIT_COUNT=$(find app/build/outputs/apk -name "*-arm64-v8a*.apk" -o -name "*-armeabi-v7a*.apk" -o -name "*-x86_64*.apk" 2>/dev/null | wc -l)
          if [ "$SPLIT_COUNT" -gt 0 ]; then
            echo "::notice title=Splits Success::$SPLIT_COUNT split APKs generated."
          else
            echo "::warning title=No Splits::No architecture-specific APKs found. Universal APKs may have been generated instead."
          fi
          echo "::endgroup::"

      - name: 📤 Upload APKs to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.verify-apks.outputs.release_path }}/*.apk
            ${{ steps.verify-apks.outputs.debug_path }}/*.apk
          fail_on_unmatched_files: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📱 Send arm64 APKs to Telegram
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::Sending arm64-v8a APKs to Telegram"
          
          send_apk() {
            local FILE_PATH=$1
            if [[ -z "$FILE_PATH" || ! -f "$FILE_PATH" ]]; then
              echo "::error::Invalid file path provided to send_apk function."
              return 1
            fi

            local FILE_NAME=$(basename "$FILE_PATH")
            local NL=$'\n'
            local CAPTION="📦 *${FILE_NAME}*${NL}🔖 Version: *${{ steps.build-info.outputs.version }}*${NL}📅 Built: *${{ steps.build-info.outputs.build-time }}*"

            echo "::notice::Sending ${FILE_NAME} to Telegram..."
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" -F chat_id="${TELEGRAM_CHAT_ID}" -F document=@"$FILE_PATH" -F caption="$CAPTION" -F parse_mode=Markdown)
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "::notice title=Telegram Success::✅ Successfully sent ${FILE_NAME}"
            else
              BODY=$(echo "$RESPONSE" | head -n -1)
              echo "::error title=Telegram Failed::❌ Failed to send ${FILE_NAME} (HTTP $HTTP_CODE). Response: $BODY"
            fi
          }
          
          echo "Searching for arm64-v8a APKs to send..."
          
          # Search in both release and debug paths, and also search for any APK with arm64-v8a in the name
          find app/build/outputs/apk -type f \( -name "*arm64-v8a*.apk" -o -name "*-arm64*.apk" \) 2>/dev/null | while IFS= read -r apk_file; do
            send_apk "$apk_file"
          done
          
          # If no architecture-specific APKs found, send universal APKs as fallback
          if [ $(find app/build/outputs/apk -type f \( -name "*arm64-v8a*.apk" -o -name "*-arm64*.apk" \) 2>/dev/null | wc -l) -eq 0 ]; then
            echo "::warning::No arm64-v8a specific APKs found, sending universal APKs instead..."
            find app/build/outputs/apk -type f -name "*.apk" 2>/dev/null | while IFS= read -r apk_file; do
              send_apk "$apk_file"
            done
          fi
          
          echo "::endgroup::"
