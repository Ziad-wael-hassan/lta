name: Build & Release Universal APKs

on:
  push:
    tags:
      - 'v*'

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx4g -XX:MaxMetaspaceSize=512m

jobs:
  build-and-release:
    name: Build & Release Universal APKs
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write

    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìä Setup Build Environment Info
        id: build-info
        run: |
          echo "build-time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: ‚òï Setup Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: ü§ñ Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üîê Grant Gradle Execution Permissions
        run: chmod +x ./gradlew

      - name: üî® Build Universal APKs
        run: |
          ./gradlew assembleRelease assembleDebug \
            --stacktrace \
            --no-daemon \
            --parallel \
            --build-cache \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=512m" \
            -Dkotlin.compiler.execution.strategy=in-process \
            -Dkotlin.incremental=false

      - name: üßπ Align APKs using zipalign
        run: |
          echo "::group::Aligning APKs with zipalign"
          ZIPALIGN="$ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools | sort -rV | head -n 1)/zipalign"

          for APK in app/build/outputs/apk/*/*.apk; do
            if [[ -f "$APK" ]]; then
              echo "Zipaligning: $APK"
              OUT="${APK%.apk}-aligned.apk"
              $ZIPALIGN -v -p 4 "$APK" "$OUT"
              mv -f "$OUT" "$APK"
            fi
          done
          echo "::endgroup::"

      - name: üîé Verify APKs
        id: verify-apks
        run: |
          RELEASE_APKS_PATH="app/build/outputs/apk/release"
          DEBUG_APKS_PATH="app/build/outputs/apk/debug"

          echo "release_path=$RELEASE_APKS_PATH" >> $GITHUB_OUTPUT
          echo "debug_path=$DEBUG_APKS_PATH" >> $GITHUB_OUTPUT

          RELEASE_APK=$(find "$RELEASE_APKS_PATH" -name "*.apk" | head -1)
          DEBUG_APK=$(find "$DEBUG_APKS_PATH" -name "*.apk" | head -1)

          echo "release_apk=$RELEASE_APK" >> $GITHUB_OUTPUT
          echo "debug_apk=$DEBUG_APK" >> $GITHUB_OUTPUT

          echo "release_size=$(du -h "$RELEASE_APK" | cut -f1)" >> $GITHUB_OUTPUT
          echo "debug_size=$(du -h "$DEBUG_APK" | cut -f1)" >> $GITHUB_OUTPUT

          APK_COUNT=$(find app/build/outputs/apk -name "*.apk" | wc -l)
          if [ "$APK_COUNT" -eq 0 ]; then
            echo "::error::No APKs found!"
            exit 1
          fi

      - name: üöÄ Upload APKs to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.verify-apks.outputs.release_path }}/*.apk
            ${{ steps.verify-apks.outputs.debug_path }}/*.apk
          fail_on_unmatched_files: false
          generate_release_notes: true
          body: |
            ## üì¶ APKs Ready

            ‚úÖ Release: ${{ steps.verify-apks.outputs.release_size }}
            
            üêû Debug: ${{ steps.verify-apks.outputs.debug_size }}

            Built on: ${{ steps.build-info.outputs.build-time }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì± Send APKs to Telegram
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::Sending APKs to Telegram"

          send_apk() {
            local FILE_PATH="$1"
            local BUILD_TYPE="$2"
            [ ! -f "$FILE_PATH" ] && echo "::error::Missing $FILE_PATH" && return 1

            local FILE_NAME=$(basename "$FILE_PATH")
            local FILE_SIZE=$(du -h "$FILE_PATH" | cut -f1)
            local FILE_SIZE_BYTES=$(stat -c%s "$FILE_PATH")
            local COMMIT_SHORT="${GITHUB_SHA:0:7}"
            local NL=$'\n'

            local CAPTION="üì± *${FILE_NAME}*${NL}${NL}"
            CAPTION+="üè∑Ô∏è *Version:* \`${{ steps.build-info.outputs.version }}\`${NL}"
            CAPTION+="üî® *Build Type:* \`${BUILD_TYPE}\`${NL}"
            CAPTION+="üìè *Size:* \`${FILE_SIZE} (${FILE_SIZE_BYTES} bytes)\`${NL}"
            CAPTION+="üìÖ *Built:* \`${{ steps.build-info.outputs.build-time }}\`${NL}"
            CAPTION+="üîó *Commit:* \`${COMMIT_SHORT}\`${NL}${NL}"
            CAPTION+="üì• Install or download from release."

            echo "::notice::Uploading ${FILE_NAME} to Telegram..."

            for i in {1..3}; do
              RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
                -F chat_id="${TELEGRAM_CHAT_ID}" \
                -F document=@"${FILE_PATH}" \
                -F parse_mode=Markdown \
                -F caption="${CAPTION}")

              if echo "$RESPONSE" | grep -q '"ok":true'; then
                echo "::notice::Uploaded ${FILE_NAME}"
                return 0
              else
                echo "::warning::Attempt $i failed. Retrying in 5s..."
                sleep 5
              fi
            done

            echo "::error::Failed to send ${FILE_NAME} after 3 attempts."
            return 1
          }

          send_apk "${{ steps.verify-apks.outputs.release_apk }}" "Release"
          send_apk "${{ steps.verify-apks.outputs.debug_apk }}" "Debug"

          echo "::endgroup::"
